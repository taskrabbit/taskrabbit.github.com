---
layout: post
title: Parameters for posting a task
---
# Parameters for posting a Task

TaskRabbit allows posting of Tasks by a client application on behalf of a user that has authorized that application. Authorization is done through OAuth and assigns a unique token to the user for for the application to use. This key is passed in all requests.

The same scenario is employed when an application/company is posting directly to TaskRabbit. First create a user for the company/application, authorize the user, and utilize the returned token for posting a Task to TaskRabbit.

## Creating a new Task

To create a Task, the client application POSTs json or x-www-form-urlencoded data.

### Parameters

_\* = required_

**name***  - The short, public text shown to describe the Task `string`

**named_price*** - Amount in USD the TaskPoster is willing to pay for the Task `integer`

**city_id*** - The metro area (see below) where the Task will occur (required when location is not set) `integer`

* `1` Boston
* `3` San Francisco Bay Area
* `4` New York City
* `5` Chicago
* `6` Los Angeles
* `8` Austin
* `10` Portland
* `11` Seattle
* `148`  San Antonio
* `9999` Virtual (Anywhere)

**description** - The description of the Task `string`
  
**private_description** - The private description of the Task (only visible to the Poster and assigned TaskRabbit) `string`

**cost\_in\_cents** - The estimate price that the Rabbit will have to spend *in cents* `integer`

**virtual** - The Task can be done online (`true` or `false`)

**assignment\_type** - Type of assignment

* `auto` Will auto assign best offer (default)
* `review` Let me review the offers


**number\_runners\_to\_fill** - If assignment_type is `auto`, maximum number of runners to automatically auto assign to fill the Task `integer`

### POST /api/v1/tasks

* Content-Type: application/json

```json
{
  "task": {
    "name":"Dog walking",
    "named_price": 20, 
    "city_id": 1,
    "description": "I want you to walk him to his favorite state park",
    "private_description": "Secret informations",
    "cost_in_cents": 500,
    "virtual": true,
    "assignment_type": "review"
  }
}
```

### Simplified Response

* Status Code: 200
* Content-Type: application/json

```json
{
  "id": 2835,
  "name": "Dog walking",
  "named_price": 20,
  "city": {
    "name": "Boston",
    "id": 1
  },
  "description": "I want you to walk him to his favorite state park",
  "private_description": "Secret informations",
  "cost_in_cents": 500,
  "virtual": true,
  "assignment_type": "review",
  "state": "opened",
  "links": {
    "get": "/api/v1/tasks/2835"
  }
}
```

## Task Times

All times are epoch GMT (e.g. 1315582320)

**complete\_by\_time** - 
A specific time that the Task must be completed by. 

**assign\_by\_time** - A specific time that the Task must be assigned by. This time is set so that the end user knows that a TaskRabbit is on the job or not.

## Setting both parameters

### POST /api/v1/tasks

```json
{
  "task": {
    "name":"Dog walking",
    "named_price": 20, 
    "city_id": 1,
    "complete_by_time": 1315582320, // 2011-09-09 11:32 AM
    "assign_by_time": 1315578000    // 2011-09-09 10:20 AM
  }
}
```

### Simplified Response
```json
{
  "complete_by_time": 1315582320, // 2011-09-09 11:32 AM
  "assign_by_time": 1315578000    // 2011-09-09 10:20 AM
}
```

If the assigned by time is later than the complete by time, we will reset the assigned by time to the same time as the complete by time.

## Setting only the complete by time

### POST /api/v1/tasks

```json
{
  "task": {
    "name":"Dog walking",
    "named_price": 20, 
    "city_id": 1,
    "complete_by_time": 1315582320 // 2011-09-09 11:32 AM
  }
}
```

### Simplified Response

```json
{
  "complete_by_time": 1315582320, // 2011-09-09 11:32 AM
  "assign_by_time": 1315582320    // 2011-09-09 11:32 AM
}
```
The assign by time is set to the same time as complete by time.

## Setting only the assign by time

### POST /api/v1/tasks

```json
{
  "task": {
    "name":"Dog walking",
    "named_price": 20, 
    "city_id": 1,
    "assign_by_time": 1315578000 // 2011-09-09 10:20 AM
  }
}
```

### Simplified Response

```json
{
  "assign_by_time": 1315578000,   // 2011-09-09 10:20 AM
  "complete_by_time": 1315666800  // 2011-09-10 11:00 AM
}
```

The complete by time will have will be set to the assigned by time plus 24 hours. But if it falls between 8pm and 11am (as it does here), then it is pushed to 11am.

## Setting the complete by time in the past

### POST /api/v1/tasks

```json
{
  "task": {
    "name":"Dog walking",
    "named_price": 20, 
    "city_id": 1,
    "complete_by_time": 1315571520 // 2011-09-09 08:32 AM
  }
}
```

### Simplified Response

```json
{
  "assign_by_time": 1315666800,   // 2011-09-10 11:00 AM
  "complete_by_time": 1315753200  // 2011-09-11 11:00 AM
}
```

Default times will be set by TaskRabbit. Defaults are determined programmatically based on task types.

## Setting the assign by time in the past

### POST /api/v1/tasks
```json
{
  "task": {
    "name":"Dog walking",
    "named_price": 20, 
    "city_id": 1,
    "assign_by_time": 1315571520 // 2011-09-09 08:32 AM
  }
}
```

### Simplified Response


```json
{
  "assign_by_time": 1315666800,   // 2011-09-10 11:00 AM
  "complete_by_time": 1315753200  // 2011-09-11 11:00 AM
}
```

Default times will be set by TaskRabbit. Defaults are determined programmatically based on task types.